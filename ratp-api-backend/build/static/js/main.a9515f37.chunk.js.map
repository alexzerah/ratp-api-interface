{"version":3,"sources":["static/img/logo/logo-metro.png","static/img/logo/logo-tramway.png","static/img/logo/logo-rer.png","static/img/logo/logo-noctilien.png","static/img/logo/logo-bus.png","static/img/logo/logo-ratp.png","static/img/team/kevinhuang78.jpg","static/img/team/pgrimaud.jpg","components/layouts/AppLayout.js","screens/Exceptions/NotFoundExceptionScreen.js","screens/HomeScreen.js","utils/API.js","components/LoadingScreen.js","components/traffic/TrafficCard.js","components/traffic/TrafficTab.js","utils/helper.js","screens/TrafficScreen.js","actions/traffics.js","actions/lines.js","components/line/LineCard.js","components/line/LineTab.js","screens/LinesScreen.js","screens/SchedulesScreen.js","actions/schedules.js","screens/TeamScreen.js","screens/ContactScreen.js","App.js","serviceWorker.js","reducers/traffics.js","reducers/lines.js","reducers/schedules.js","reducers/index.js","index.js"],"names":["module","exports","AppLayout","props","state","collapsedMenu","handleCollapse","bind","this","setState","Sider","collapsible","breakpoint","collapsed","onCollapse","src","Logo","alt","className","theme","defaultOpenKeys","defaultSelectedKeys","mode","Item","key","to","type","SubMenu","title","Content","children","Footer","href","rel","target","Component","NotFoundExceptionScreen","HomeScreen","document","instance","axios","create","baseURL","process","interceptors","request","use","config","error","Promise","reject","defaults","headers","timeout","LoadingScreen","avatar","paragraph","rows","active","renderIcon","LogoMetro","LogoTramway","LogoRer","LogoNoctilien","LogoBus","TrafficCard","trafficItem","line","message","TrafficTab","traffic","page","handleSearch","value","length","filter","t","some","v","showSearch","allowClear","placeholder","onChange","map","Option","slice","total","removeDuplicates","myArr","prop","obj","pos","arr","mapObj","indexOf","notificationError","description","icon","duration","notification","TrafficScreen","loading","loadTraffic","getTraffic","then","catch","traffics","trafficError","code","trafficList","defaultActiveKey","tabBarExtraContent","onClick","TabPane","tab","metros","rers","tramways","mapDispatchToProps","dispatch","API","get","response","data","result","connect","getLines","LineCard","lineItem","name","directions","LineTab","l","includes","id","simple","LinesScreen","loadLines","lines","linesError","linesList","buses","noctiliens","SchedulesScreen","stationsLoading","destinationsLoading","schedulesLoading","stations","destinations","schedules","station","way","values","typeCode","loadStations","loadDestinations","loadSchedules","copyObject","label","m","r","b","n","getStations","stationsList","stationsError","getDestinations","destinationsList","destinationsError","getSchedules","schedulesError","schedulesList","options","renderOptionsSchedules","expandTrigger","tip","s","slug","d","destination","position","TeamScreen","hoverable","cover","KevinHuang","Meta","PierreGrimaud","ContactScreen","App","exact","path","component","Boolean","window","location","hostname","match","initialState","trafficLoading","linesLoading","combineReducers","action","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iIAAAA,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,sC,+SC2G5BC,E,YAjGX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,eAAe,GAGnB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBAPP,E,8EAWfC,KAAKC,SAAS,CAAEJ,eAAgBG,KAAKJ,MAAMC,kB,+BAI3C,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,MACA,kBAAC,IAAOK,MAAR,CACIC,aAAW,EACXC,WAAW,KACXC,UAAWL,KAAKJ,MAAMC,cACtBS,WAAYN,KAAKF,gBAEjB,yBAAKS,IAAKC,IAAMC,IAAI,eAAeC,UAAU,SAC7C,kBAAC,IAAD,CACIC,MAAM,OACNC,gBAAiBZ,KAAKL,MAAMiB,gBAC5BC,oBAAqBb,KAAKL,MAAMkB,oBAChCC,KAAK,UAEL,kBAAC,IAAKC,KAAN,CAAWC,IAAI,QACX,kBAAC,IAAD,CAAMC,GAAG,KACL,kBAAC,IAAD,CAAMC,KAAK,SACX,kDAGR,kBAAC,IAAKH,KAAN,CAAWC,IAAI,WACX,kBAAC,IAAD,CAAMC,GAAG,aACL,kBAAC,IAAD,CAAMC,KAAK,UACX,0CAGR,kBAAC,IAAKH,KAAN,CAAWC,IAAI,QACX,kBAAC,IAAD,CAAMC,GAAG,UACL,kBAAC,IAAD,CAAMC,KAAK,SACX,wDAGR,kBAAC,IAAKH,KAAN,CAAWC,IAAI,YACX,kBAAC,IAAD,CAAMC,GAAG,cACL,kBAAC,IAAD,CAAMC,KAAK,iBACX,4CAGR,kBAAC,IAAKC,QAAN,CACIH,IAAI,QACJI,MACI,8BACE,kBAAC,IAAD,CAAMF,KAAK,YACX,+CAIN,kBAAC,IAAKH,KAAN,CAAWC,IAAI,QACX,kBAAC,IAAD,CAAMC,GAAG,SACL,kBAAC,IAAD,CAAMC,KAAK,SACX,+CAGR,kBAAC,IAAKH,KAAN,CAAWC,IAAI,WACX,kBAAC,IAAD,CAAMC,GAAG,aACL,kBAAC,IAAD,CAAMC,KAAK,aACX,8CAMpB,kBAAC,IAAD,KACI,kBAAC,IAAOG,QAAR,CAAgBX,UAAS,UAAKV,KAAKJ,MAAMC,cAAgB,GAAK,kCACzDG,KAAKL,MAAM2B,UAEhB,kBAAC,IAAOC,OAAR,CAAeb,UAAS,UAAKV,KAAKJ,MAAMC,cAAgB,GAAK,iCAA7D,0CACwC,uBAAG2B,KAAK,mCAAmCC,IAAI,sBAAsBC,OAAO,UAA5E,yB,GArFpCC,aCATC,EANiB,kBAC5B,kBAAC,EAAD,KACI,wBAAIlB,UAAU,aAAd,qB,iBCmBOmB,E,YAnBX,WAAYlC,GAAQ,IAAD,6BACf,4CAAMA,IAENmC,SAASV,MAAQ,sCAHF,E,sEAOf,OACI,kBAAC,EAAD,CACIP,oBAAqB,CAAC,SAEtB,kBAAC,IAAD,oCACA,iJACA,kBAAC,IAAD,0CACA,wCAAa,uBAAGW,KAAK,4CAA4CC,IAAI,sBAAsBC,OAAO,UAArF,aAAb,6C,GAfSC,a,iBCFnBI,E,OAAWC,EAAMC,OAAO,CAC1BC,QAASC,2CAGbJ,EAASK,aAAaC,QAAQC,KAC1B,SAAAC,GAcI,OAAOA,KAEX,SAAAC,GAAK,OAAKC,QAAQC,OAAOF,MAE7BT,EAASY,SAASC,QAAQ,gBAAkB,sBAC5Cb,EAASY,SAASE,QAAU,IAEbd,Q,sBCjBAe,EARO,kBAClB,kBAAC,IAAD,CACIC,QAAM,EACNC,UAAW,CAAEC,KAAM,GACnBC,QAAM,K,qICCd,SAASC,EAAWjC,GAChB,OAAQA,GACJ,IAAK,WACD,OAAOkC,IACX,IAAK,UACD,OAAOC,IACX,IAAK,MACD,OAAOC,IACX,IAAK,YACD,OAAOC,IACX,IAAK,MACD,OAAOC,IACX,QACI,OAAO,MAInB,IAoBeC,EApBK,SAAC9D,GAAD,OAChB,yBAAKe,UAAU,eACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,oBAAoBH,IAAK4C,EAAWxD,EAAMuB,MAAOT,IAAK,eAAcd,EAAMuB,KAAO,IAAMvB,EAAM+D,YAAYC,OACxH,wBAAIjD,UAAU,qBAAqBf,EAAM+D,YAAYC,OAEzD,yBAAKjD,UAAU,wBACX,uBAAGA,UAAU,sBAAsBf,EAAM+D,YAAYtC,OACrD,uBAAGV,UAAU,wBAAwBf,EAAM+D,YAAYE,Y,qBCoCpDC,G,YA9DX,WAAYlE,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTkE,QAAS,EAAKnE,MAAMmE,QACpBC,KAAM,GAGV,EAAKC,aAAe,EAAKA,aAAajE,KAAlB,gBARL,E,0EAWNkE,GACTjE,KAAKC,SAAS,CACV6D,QAASG,EAAMC,OAAS,EAClB,YAAIlE,KAAKL,MAAMmE,SAASK,QAAO,SAAAC,GAAC,OAAIH,EAAMI,MAAK,SAAAC,GAAC,OAAIF,EAAET,OAASW,QAC/DtE,KAAKL,MAAMmE,Y,+BAIf,IAAD,OACL,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,CACIhD,KAAK,WACLyD,YAAU,EACVC,YAAU,EACVC,YAAa,gDAA+CzE,KAAKL,MAAMuB,KAAO,MAC9EwD,SAAU,SAAAT,GAAK,OAAI,EAAKD,aAAaC,KAGjCjE,KAAKL,MAAMmE,QAAQa,KAAI,SAAAP,GAAC,OACpB,kBAAC,IAAOQ,OAAR,CAAe5D,IAAKoD,EAAET,KAAMM,MAAOG,EAAET,MAAO,EAAKhE,MAAMuB,KAAvD,IAA8DkD,EAAET,UAKxE3D,KAAKJ,MAAMkE,QACNe,MAA8B,IAAvB7E,KAAKJ,MAAMmE,KAAO,GAA2B,GAAlB/D,KAAKJ,MAAMmE,MAC7CY,KAAI,SAAAP,GAAC,OACF,kBAAC,EAAD,CACIpD,IAAK,EAAKrB,MAAMuB,KAAO,IAAMkD,EAAET,KAC/BzC,KAAM,EAAKvB,MAAMuB,KACjBwC,YAAaU,OAKzBpE,KAAKJ,MAAMkE,QAAQI,OAAS,IACxB,kBAAC,KAAD,CAAYQ,SAAU,SAAAX,GAAI,OAAI,EAAK9D,SAAS,CAAC8D,UAAQe,MAAO9E,KAAKJ,MAAMkE,QAAQI,c,GAjD9EvC,a,qBCFlB,SAASoD,GAAiBC,EAAOC,GACpC,OAAOD,EAAMb,QAAO,SAACe,EAAKC,EAAKC,GAAX,OAAmBA,EAAIT,KAAI,SAAAU,GAAM,OAAIA,EAAOJ,MAAOK,QAAQJ,EAAID,MAAWE,KAG3F,SAASI,GAAkB3B,EAAS4B,GAA2D,IAA9CC,EAA6C,uDAAtC,kBAAC,IAAD,CAAMvE,KAAK,UAAYwE,EAAe,uDAAJ,GAC7F,OAAOC,KAAanD,MAAM,CACtBoB,UACA4B,cACAC,OACAC,a,ICHFE,G,YACF,WAAYjG,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTiG,SAAS,GAGb/D,SAASV,MAAQ,8BAEjB,EAAK0E,YAAc,EAAKA,YAAY/F,KAAjB,gBATJ,E,iFAafC,KAAK8F,gB,oCAGM,IAAD,OACV9F,KAAKL,MAAMoG,aACNC,MAAK,kBAAM,EAAK/F,SAAS,CAAC4F,SAAS,OACnCI,OAAM,kBAAMV,GAAkB,EAAK5F,MAAMuG,SAASC,aAAaC,KAAM,EAAKzG,MAAMuG,SAASC,aAAavC,c,+BAGrG,IAAD,OACCyC,EAAcrG,KAAKL,MAAMuG,SAASG,YAExC,OACI,kBAAC,EAAD,CACIxF,oBAAqB,CAAC,YAGlBb,KAAKJ,MAAMiG,QACL,kBAAC,EAAD,MACA,6BACE,kBAAC,IAAD,CACIS,iBAAiB,SACjBC,mBACI,kBAAC,IAAD,CACIrF,KAAK,SACLsF,QAAS,WACL,EAAKvG,SAAS,CAAC4F,SAAS,IACxB,EAAKC,kBAKjB,kBAAC,IAAKW,QAAN,CAAcC,IAAI,YAAS1F,IAAI,UAC3B,kBAAC,GAAD,CACI8C,QAASuC,EAAYM,OACrBzF,KAAK,cAGb,kBAAC,IAAKuF,QAAN,CAAcC,IAAI,OAAO1F,IAAI,QACzB,kBAAC,GAAD,CACI8C,QAASuC,EAAYO,KACrB1F,KAAK,SAGb,kBAAC,IAAKuF,QAAN,CAAcC,IAAI,WAAW1F,IAAI,YAC7B,kBAAC,GAAD,CACI8C,QAASuC,EAAYQ,SACrB3F,KAAK,oB,GA7DjBS,aA4EtBmF,GAAqB,CACvBf,WCjFG,WACH,OAAO,SAAAgB,GACHA,EAAS,CAAC7F,KANmB,0BAO7B,IAAMmB,EAAU2E,EAAIC,IAAI,YAKxB,OAJA5E,EACK2D,MAAK,SAAAkB,GAAQ,OAAIH,EAAS,CAAC7F,KARL,sBAQgCiG,KAAMD,EAASC,KAAKC,YAC1EnB,OAAM,SAAAzD,GAAK,OAAIuE,EAAS,CAAC7F,KARH,sBAQ8BiG,KAAM3E,EAAM0E,SAASC,KAAKC,YAE5E/E,KD4EAgF,gBARS,SAACzH,GAAD,MAAY,CAChCsG,SAAUtG,EAAMsG,YAOoBY,GAAzBO,CAA6CzB,IEpFrD,SAAS0B,KACZ,OAAO,SAAAP,GACHA,EAAS,CAAC7F,KANiB,wBAO3B,IAAMmB,EAAU2E,EAAIC,IAAI,UAKxB,OAJA5E,EACK2D,MAAK,SAAAkB,GAAQ,OAAIH,EAAS,CAAC7F,KARP,oBAQgCiG,KAAMD,EAASC,KAAKC,YACxEnB,OAAM,SAAAzD,GAAK,OAAIuE,EAAS,CAAC7F,KARL,oBAQ8BiG,KAAM3E,EAAM0E,SAASC,KAAKC,YAE1E/E,GCNf,SAASc,GAAWjC,GAChB,OAAQA,GACJ,IAAK,WACD,OAAOkC,IACX,IAAK,UACD,OAAOC,IACX,IAAK,MACD,OAAOC,IACX,IAAK,YACD,OAAOC,IACX,IAAK,MACD,OAAOC,IACX,QACI,OAAO,MAInB,IAoBe+D,GApBE,SAAC5H,GAAD,OACb,yBAAKe,UAAU,eACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,oBAAoBH,IAAK4C,GAAWxD,EAAMuB,MAAOT,IAAK,eAAcd,EAAMuB,KAAO,IAAMvB,EAAM6H,SAASpB,OACrH,wBAAI1F,UAAU,qBAAqBf,EAAM6H,SAASpB,OAEtD,yBAAK1F,UAAU,wBACX,uBAAGA,UAAU,sBAAsBf,EAAM6H,SAASC,MAClD,uBAAG/G,UAAU,wBAAb,gBAAkDf,EAAM6H,SAASE,eCsC9DC,G,YA/DX,WAAYhI,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACT+D,KAAM,EAAKhE,MAAMgE,KACjBI,KAAM,GAGV,EAAKC,aAAe,EAAKA,aAAajE,KAAlB,gBARL,E,0EAWNkE,GACTjE,KAAKC,SAAS,CACV0D,KAAMM,EAAMC,OAAS,EACf,YAAIlE,KAAKL,MAAMgE,MAAMQ,QAAO,SAAAyD,GAAC,OAAI3D,EAAMI,MAAK,SAAAC,GAAC,OAAIsD,EAAEH,KAAKI,SAASvD,SACjEtE,KAAKL,MAAMgE,S,+BAIf,IAAD,OACL,OACI,kBAAC,WAAD,KACI,kBAAC,IAAD,CACI7C,KAAK,WACLyD,YAAU,EACVC,YAAU,EACVC,YAAa,gDAA+CzE,KAAKL,MAAMuB,KAAO,MAC9EwD,SAAU,SAAAT,GAAK,OAAI,EAAKD,aAAaC,KAGjCc,GAAiB/E,KAAKL,MAAMgE,KAAM,QAC7BgB,KAAI,SAAAiD,GAAC,OACF,kBAAC,IAAOhD,OAAR,CAAe5D,IAAK4G,EAAEE,GAAI7D,MAAO2D,EAAEH,MAAOG,EAAEH,UAKxDzH,KAAKJ,MAAM+D,KACNkB,MAA8B,IAAvB7E,KAAKJ,MAAMmE,KAAO,GAA2B,GAAlB/D,KAAKJ,MAAMmE,MAC7CY,KAAI,SAAAiD,GAAC,OACF,kBAAC,GAAD,CACI5G,IAAK,EAAKrB,MAAMuB,KAAO,IAAM0G,EAAEE,GAC/B5G,KAAM,EAAKvB,MAAMuB,KACjBsG,SAAUI,OAKtB5H,KAAKJ,MAAM+D,KAAKO,OAAS,IACrB,kBAAC,KAAD,CAAY6D,QAAM,EAACrD,SAAU,SAAAX,GAAI,OAAI,EAAK9D,SAAS,CAAC8D,UAAQe,MAAO9E,KAAKJ,MAAM+D,KAAKO,c,GAlDrFvC,aCGhBqG,G,YACF,WAAYrI,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTiG,SAAS,GAGb/D,SAASV,MAAQ,4CAEjB,EAAK6G,UAAY,EAAKA,UAAUlI,KAAf,gBATF,E,iFAafC,KAAKiI,c,kCAGI,IAAD,OACRjI,KAAKL,MAAM2H,WACNtB,MAAK,kBAAM,EAAK/F,SAAS,CAAC4F,SAAS,OACnCI,OAAM,kBAAMV,GAAkB,EAAK5F,MAAMuI,MAAMC,WAAW/B,KAAM,EAAKzG,MAAMuI,MAAMC,WAAWvE,c,+BAG3F,IAAD,OACCwE,EAAYpI,KAAKL,MAAMuI,MAAME,UAEnC,OACI,kBAAC,EAAD,CACIvH,oBAAqB,CAAC,SAGlBb,KAAKJ,MAAMiG,QACL,kBAAC,EAAD,MACA,6BACE,kBAAC,IAAD,CACIS,iBAAiB,SACjBC,mBACI,kBAAC,IAAD,CACIrF,KAAK,SACLsF,QAAS,WACL,EAAKvG,SAAS,CAAC4F,SAAS,IACxB,EAAKoC,gBAKjB,kBAAC,IAAKxB,QAAN,CAAcC,IAAI,YAAS1F,IAAI,UAC3B,kBAAC,GAAD,CACI2C,KAAMyE,EAAUzB,OAChBzF,KAAK,cAGb,kBAAC,IAAKuF,QAAN,CAAcC,IAAI,OAAO1F,IAAI,QACzB,kBAAC,GAAD,CACI2C,KAAMyE,EAAUxB,KAChB1F,KAAK,SAGb,kBAAC,IAAKuF,QAAN,CAAcC,IAAI,WAAW1F,IAAI,YAC7B,kBAAC,GAAD,CACI2C,KAAMyE,EAAUvB,SAChB3F,KAAK,aAGb,kBAAC,IAAKuF,QAAN,CAAcC,IAAI,MAAM1F,IAAI,SACxB,kBAAC,GAAD,CACI2C,KAAMyE,EAAUC,MAChBnH,KAAK,SAGb,kBAAC,IAAKuF,QAAN,CAAcC,IAAI,aAAa1F,IAAI,cAC/B,kBAAC,GAAD,CACI2C,KAAMyE,EAAUE,WAChBpH,KAAK,sB,GAzEnBS,aAwFpBmF,GAAqB,CACvBQ,aAGWD,gBARS,SAACzH,GAAD,MAAY,CAChCsI,MAAOtI,EAAMsI,SAOuBpB,GAAzBO,CAA6CW,I,qFC1FtDO,G,YACF,WAAY5I,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTiG,SAAS,EACT2C,iBAAiB,EACjBC,qBAAqB,EACrBC,kBAAkB,EAClBC,SAAU,GACVC,aAAc,GACdC,UAAW,GACXxG,QAAS,CACLnB,KAAM,GACNkF,KAAM,GACN0C,QAAS,GACTC,IAAK,IAETC,OAAQ,CACJC,SAAU,KACVH,QAAS,KACTC,IAAK,OAIbjH,SAASV,MAAQ,gCAEjB,EAAK8H,aAAe,EAAKA,aAAanJ,KAAlB,gBACpB,EAAKoJ,iBAAmB,EAAKA,iBAAiBpJ,KAAtB,gBACxB,EAAKqJ,cAAgB,EAAKA,cAAcrJ,KAAnB,gBA5BN,E,iFA+BE,IAAD,OAChBC,KAAKL,MAAM2H,WACNtB,MAAK,kBAAM,EAAK/F,SAAS,CAAC4F,SAAS,OACnCI,OAAM,kBAAMV,GAAkB,EAAK5F,MAAMuI,MAAMC,WAAW/B,KAAM,EAAKzG,MAAMuI,MAAMC,WAAWvE,c,6CAG9EsE,GACnB,IAAMmB,EAAU,gBAAOnB,GACjBvB,EAAS5B,GAAiBsE,EAAW1C,OAAQ,QAC7CC,EAAO7B,GAAiBsE,EAAWzC,KAAM,QACzCC,EAAW9B,GAAiBsE,EAAWxC,SAAU,QACjDwB,EAAQtD,GAAiBsE,EAAWhB,MAAO,QAC3CC,EAAavD,GAAiBsE,EAAWf,WAAY,QAC3D,MAAO,CACH,CACIrE,MAAO,SACPqF,MAAO,YACPhI,SAAUqF,EAAOhC,KAAI,SAAA4E,GAAC,MAAK,CACvBtF,MAAOsF,EAAEnD,KACTkD,MAAOC,EAAE9B,UAGjB,CACIxD,MAAO,OACPqF,MAAO,OACPhI,SAAUsF,EAAKjC,KAAI,SAAA6E,GAAC,MAAK,CACrBvF,MAAOuF,EAAEpD,KACTkD,MAAOE,EAAE/B,UAGjB,CACIxD,MAAO,WACPqF,MAAO,WACPhI,SAAUuF,EAASlC,KAAI,SAAAP,GAAC,MAAK,CACzBH,MAAOG,EAAEgC,KACTkD,MAAOlF,EAAEqD,UAGjB,CACIxD,MAAO,QACPqF,MAAO,MACPhI,SAAU+G,EAAM1D,KAAI,SAAA8E,GAAC,MAAK,CACtBxF,MAAOwF,EAAErD,KACTkD,MAAOG,EAAEhC,UAGjB,CACIxD,MAAO,aACPqF,MAAO,aACPhI,SAAUgH,EAAW3D,KAAI,SAAA+E,GAAC,MAAK,CAC3BzF,MAAOyF,EAAEtD,KACTkD,MAAOI,EAAEjC,a,mCAMZxD,GAAQ,IAAD,OACV/C,EAAwB,IAAjB+C,EAAMC,OAAeD,EAAM,GAAK,GACvCmC,EAAwB,IAAjBnC,EAAMC,OAAeD,EAAM,GAAK,GAC7CjE,KAAKC,SAAS,CACVuI,iBAAiB,EACjBnG,QAAS,CACLnB,OACAkF,QAEJ4C,OAAQ,CACJC,SAAUhF,GAEd0E,SAAU,GACVC,aAAc,GACdC,UAAW,KAEE,IAAjB5E,EAAMC,OACAlE,KAAKL,MAAMgK,YAAYzI,EAAMkF,GAC1BJ,MAAK,kBAAM,EAAK/F,SAAS,CACtBuI,iBAAiB,EACjBG,SAAU,EAAKhJ,MAAMkJ,UAAUe,kBAElC3D,OAAM,kBAAMV,GAAkB,EAAK5F,MAAMkJ,UAAUgB,cAAczD,KAAM,EAAKzG,MAAMkJ,UAAUgB,cAAcjG,YAC7G5D,KAAKC,SAAS,CAACuI,iBAAiB,M,uCAGzBM,GAAU,IAAD,OACtB9I,KAAKC,SAAS,CACVwI,qBAAqB,EACrBpG,QAAQ,gBACDrC,KAAKJ,MAAMyC,QADX,CAEHyG,UACAC,IAAK,KAETC,OAAO,gBACAhJ,KAAKJ,MAAMoJ,OADZ,CAEFF,UACAC,IAAK,OAETH,aAAc,GACdC,UAAW,KAEf7I,KAAKL,MAAMmK,gBAAgB9J,KAAKJ,MAAMyC,QAAQnB,KAAMlB,KAAKJ,MAAMyC,QAAQ+D,MAClEJ,MAAK,kBAAM,EAAK/F,SAAS,CACtBwI,qBAAqB,EACrBG,aAAc,EAAKjJ,MAAMkJ,UAAUkB,sBAEtC9D,OAAM,kBAAMV,GAAkB,EAAK5F,MAAMkJ,UAAUmB,kBAAkB5D,KAAM,EAAKzG,MAAMkJ,UAAUmB,kBAAkBpG,c,oCAG7GmF,GAAM,IAAD,OACf/I,KAAKC,SAAS,CACVoC,QAAQ,gBACDrC,KAAKJ,MAAMyC,QADX,CAEH0G,QAEJC,OAAO,gBACAhJ,KAAKJ,MAAMoJ,OADZ,CAEFD,QAEJF,UAAW,KACZ,WACKE,IACA,EAAK9I,SAAS,CAACyI,kBAAkB,IACjC,EAAK/I,MAAMsK,aAAa,EAAKrK,MAAMyC,QAAQnB,KAAM,EAAKtB,MAAMyC,QAAQ+D,KAAM,EAAKxG,MAAMyC,QAAQyG,QAAS,EAAKlJ,MAAMyC,QAAQ0G,KACpH/C,MAAK,WACE,EAAKrG,MAAMkJ,UAAUqB,eACrB3E,GAAkB,EAAK5F,MAAMkJ,UAAUqB,eAAe9D,KAAM,EAAKzG,MAAMkJ,UAAUqB,eAAetG,SAEhG,EAAK3D,SAAS,CACVyI,kBAAkB,EAClBG,UAAW,EAAKlJ,MAAMkJ,UAAUsB,yB,+BAQlD,IAAD,OACL,OACI,kBAAC,EAAD,CACItJ,oBAAqB,CAAC,aAGlBb,KAAKJ,MAAMiG,QACL,kBAAC,EAAD,MACA,6BACE,yBAAKnF,UAAU,aACX,yBAAKA,UAAU,qBACX,uBAAGA,UAAU,0BAAb,yCACA,kBAAC,KAAD,CACI0J,QAASpK,KAAKqK,uBAAuBrK,KAAKL,MAAMuI,MAAME,WACtDkC,cAAc,QACd7F,YAAY,wCACZF,YAAU,EACVN,MAAOjE,KAAKJ,MAAMoJ,OAAOC,SACzBvE,SAAU,SAAAT,GAAK,OAAI,EAAKiF,aAAajF,OAIzCjE,KAAKJ,MAAM4I,gBACL,kBAAC,KAAD,CAAM+B,IAAI,kBACTvK,KAAKJ,MAAM+I,SAASzE,OAAS,IAAMlE,KAAKJ,MAAM4I,iBAC7C,yBAAK9H,UAAU,qBACX,uBAAGA,UAAU,0BAAb,8BACA,kBAAC,IAAD,CACI6D,YAAU,EACVC,YAAU,EACVC,YAAY,6BACZR,MAAOjE,KAAKJ,MAAMoJ,OAAOF,QACzBpE,SAAU,SAAAT,GAAK,OAAI,EAAKkF,iBAAiBlF,KAGrCjE,KAAKJ,MAAM+I,SAAShE,KAAI,SAAA6F,GAAC,OACrB,kBAAC,IAAO5F,OAAR,CAAe5D,IAAKwJ,EAAEC,KAAMxG,MAAOuG,EAAEC,MAAOD,EAAE/C,WAOtEzH,KAAKJ,MAAM6I,oBACL,kBAAC,KAAD,CAAM8B,IAAI,kBACTvK,KAAKJ,MAAMgJ,aAAa1E,OAAS,IAAMlE,KAAKJ,MAAM6I,qBACrD,yBAAK/H,UAAU,qBACX,uBAAGA,UAAU,0BAAb,kCACA,kBAAC,IAAD,CACI6D,YAAU,EACVC,YAAU,EACVC,YAAY,iCACZR,MAAOjE,KAAKJ,MAAMoJ,OAAOD,IACzBrE,SAAU,SAAAT,GAAK,OAAI,EAAKmF,cAAcnF,KAEtC,kBAAC,IAAOW,OAAR,CAAe5D,IAAI,MAAMiD,MAAM,OAA/B,sBAEIjE,KAAKJ,MAAMgJ,aAAajE,KAAI,SAAA+F,GAAC,OACzB,kBAAC,IAAO9F,OAAR,CAAe5D,IAAK0J,EAAE3B,IAAK9E,MAAOyG,EAAE3B,KAAM2B,EAAEjD,YAQpEzH,KAAKJ,MAAM8I,iBACL,kBAAC,EAAD,MACC1I,KAAKJ,MAAMiJ,UAAU3E,OAAS,IAAMlE,KAAKJ,MAAM8I,kBAC9C,kBAAC,KAAD,CAAU5H,KAAK,aAEPd,KAAKJ,MAAMiJ,UACNlE,KAAI,SAAA6F,GAAC,OACF,kBAAC,KAASzJ,KAAV,CACIC,IAAKwJ,EAAE5G,QAAU4G,EAAEG,YACnBC,SACIJ,EAAEG,cAAgB,EAAK/K,MAAMgJ,aAAa,GAAGnB,KACvC,QACA,QAGT+C,EAAE5G,QARP,oBAQiC4G,EAAEG,uB,GAzP7DhJ,aA2QxBmF,GAAqB,CACvBQ,YACAwC,gBC9OG,SAAyB5I,EAAMkF,GAClC,OAAO,SAAAW,GACHA,EAAS,CAAC7F,KANwB,+BAOlC,IAAMmB,EAAU2E,EAAIC,IAAI,iBAAmB/F,EAAO,IAAMkF,GAKxD,OAJA/D,EACK2D,MAAK,SAAAkB,GAAQ,OAAIH,EAAS,CAAC7F,KARA,2BAQgCiG,KAAMD,EAASC,KAAKC,OAAOwB,kBACtF3C,OAAM,SAAAzD,GAAK,OAAIuE,EAAS,CAAC7F,KARE,2BAQ8BiG,KAAM3E,EAAM0E,SAASC,KAAKC,YAEjF/E,IDuOXsH,YC/PG,SAAqBzI,EAAMkF,GAC9B,OAAO,SAAAW,GACHA,EAAS,CAAC7F,KANoB,2BAO9B,IAAMmB,EAAU2E,EAAIC,IAAI,aAAe/F,EAAO,IAAMkF,GAKpD,OAJA/D,EACK2D,MAAK,SAAAkB,GAAQ,OAAIH,EAAS,CAAC7F,KARJ,uBAQgCiG,KAAMD,EAASC,KAAKC,OAAOuB,cAClF1C,OAAM,SAAAzD,GAAK,OAAIuE,EAAS,CAAC7F,KARF,uBAQ8BiG,KAAM3E,EAAM0E,SAASC,KAAKC,YAE7E/E,IDwPX4H,aCrRG,SAAsB/I,EAAMkF,EAAM0C,EAASC,GAC9C,OAAO,SAAAhC,GACHA,EAAS,CAAC7F,KANqB,4BAO/B,IAAMmB,EAAU2E,EAAIC,IAAI,cAAgB/F,EAAO,IAAMkF,EAAO,IAAM0C,EAAU,IAAMC,GAUlF,OATA1G,EACK2D,MAAK,SAAAkB,GAC4C,IAA1CA,EAASC,KAAKC,OAAOyB,UAAU3E,OAC/B6C,EAAS,CAAC7F,KATO,wBASsBiG,KAAMD,EAASC,KAAKC,OAAOyB,UAAU,KAE5E9B,EAAS,CAAC7F,KAZO,wBAYsBiG,KAAMD,EAASC,KAAKC,OAAOyB,eAIvExG,KD2QAgF,iBAZS,SAACzH,GAAD,MAAY,CAChCsI,MAAOtI,EAAMsI,MACbW,UAAWjJ,EAAMiJ,aAUmB/B,GAAzBO,CAA6CkB,I,8DEzP7CsC,GA9BI,kBACf,kBAAC,EAAD,CACIjK,gBAAiB,CAAC,SAClBC,oBAAqB,CAAC,SAEtB,kBAAC,IAAD,+BACA,yBAAKH,UAAU,cACX,uBAAGc,KAAK,kCAAkCC,IAAI,sBAAsBC,OAAO,UACvE,kBAAC,KAAD,CACIoJ,WAAS,EACTC,MAAO,yBAAKtK,IAAI,iBAAcF,IAAKyK,QAEnC,kBAAC,KAAKC,KAAN,CAAW7J,MAAM,iBAAcoE,YAAY,uCAIvD,kBAAC,IAAD,4BACA,yBAAK9E,UAAU,cACX,uBAAGc,KAAK,8BAA8BC,IAAI,sBAAsBC,OAAO,UACnE,kBAAC,KAAD,CACIoJ,WAAS,EACTC,MAAO,yBAAKtK,IAAI,iBAAiBF,IAAK2K,QAEtC,kBAAC,KAAKD,KAAN,CAAW7J,MAAM,iBAAiBoE,YAAY,qCClBnD2F,GATO,kBAClB,kBAAC,EAAD,CACIvK,gBAAiB,CAAC,SAClBC,oBAAqB,CAAC,YAEtB,kFAAuD,uBAAGW,KAAK,qDAAqDC,IAAI,sBAAsBC,OAAO,UAA9F,2BCmBhD0J,GAhBH,kBACR,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1J,IACjC,kBAAC,IAAD,CAAOwJ,OAAK,EAACC,KAAK,YAAYC,UAAW3F,KACzC,kBAAC,IAAD,CAAOyF,OAAK,EAACC,KAAK,SAASC,UAAWvD,KACtC,kBAAC,IAAD,CAAOqD,OAAK,EAACC,KAAK,aAAaC,UAAWhD,KAC1C,kBAAC,IAAD,CAAO8C,OAAK,EAACC,KAAK,QAAQC,UAAWV,KACrC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,YAAYC,UAAWJ,KAGzC,kBAAC,IAAD,CAAOI,UAAW3J,OCVV4J,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aChBAC,GAAe,CACjBC,gBAAgB,EAChB3F,aAAc,KACdE,YAAa,ICHXwF,GAAe,CACjBE,cAAc,EACd5D,WAAY,KACZC,UAAW,ICHTyD,GAAe,CACjBnD,kBAAkB,EAClBwB,eAAgB,KAChBC,cAAe,GACf1B,qBAAqB,EACrBuB,kBAAmB,KACnBD,iBAAkB,GAClBvB,iBAAiB,EACjBqB,cAAe,KACfD,aAAc,ICNHoC,gBAAgB,CAC3B9F,SHEW,WAAmC,IAAlCtG,EAAiC,uDAAzBiM,GAAcI,EAAW,uCAC7C,OAAQA,EAAO/K,MAEX,IXT6B,wBWUzB,OAAO,gBACAtB,EADP,CAEIkM,gBAAgB,IAExB,IXb2B,sBWcvB,OAAO,gBACAlM,EADP,CAEIkM,gBAAgB,EAChBzF,YAAa4F,EAAO9E,OAE5B,IXlB2B,sBWmBvB,OAAO,gBACAvH,EADP,CAEIkM,gBAAgB,EAChB3F,aAAc8F,EAAO9E,OAE7B,QACI,OAAOvH,IGtBfsI,MFCW,WAAmC,IAAlCtI,EAAiC,uDAAzBiM,GAAcI,EAAW,uCAC7C,OAAQA,EAAO/K,MAEX,IXT2B,sBWUvB,OAAO,gBACAtB,EADP,CAEImM,cAAc,IAEtB,IXbyB,oBWcrB,OAAO,gBACAnM,EADP,CAEImM,cAAc,EACd3D,UAAW6D,EAAO9E,OAE1B,IXlByB,oBWmBrB,OAAO,gBACAvH,EADP,CAEImM,cAAc,EACd5D,WAAY8D,EAAO9E,OAE3B,QACI,OAAOvH,IErBfiJ,UDMW,WAAmC,IAAlCjJ,EAAiC,uDAAzBiM,GAAcI,EAAW,uCAC7C,OAAQA,EAAO/K,MAEX,IPf+B,0BOgB3B,OAAO,gBACAtB,EADP,CAEI8I,kBAAkB,IAE1B,IPnB6B,wBOoBzB,OAAO,gBACA9I,EADP,CAEI8I,kBAAkB,EAClByB,cAAe8B,EAAO9E,KACtB+C,eAAgB,OAExB,IPzB6B,wBO0BzB,OAAO,gBACAtK,EADP,CAEI8I,kBAAkB,EAClBwB,eAAgB+B,EAAO9E,OAG/B,IPGkC,6BOF9B,OAAO,gBACAvH,EADP,CAEI6I,qBAAqB,IAE7B,IPDgC,2BOE5B,OAAO,gBACA7I,EADP,CAEI6I,qBAAqB,EACrBsB,iBAAkBkC,EAAO9E,OAEjC,IPNgC,2BOO5B,OAAO,gBACAvH,EADP,CAEI6I,qBAAqB,EACrBuB,kBAAmBiC,EAAO9E,OAGlC,IP/B8B,yBOgC1B,OAAO,gBACAvH,EADP,CAEI4I,iBAAiB,IAEzB,IPnC4B,uBOoCxB,OAAO,gBACA5I,EADP,CAEI4I,iBAAiB,EACjBoB,aAAcqC,EAAO9E,OAE7B,IPxC4B,uBOyCxB,OAAO,gBACAvH,EADP,CAEI4I,iBAAiB,EACjBqB,cAAeoC,EAAO9E,OAE9B,QACI,OAAOvH,M,iBExEnB,uCAWO,IAAMsM,GAAQC,aACjBC,GACwCC,aAAgBC,OAG5DC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,IACb,kBAAC,GAAD,OAEJpK,SAAS2K,eAAe,SL6GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5G,MAAK,SAAA6G,GACjCA,EAAaC,kB","file":"static/js/main.a9515f37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-metro.c9ea17d5.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-tramway.c46a8094.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-rer.0291997e.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-noctilien.ba584015.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-bus.94d0134f.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-ratp.e2b23da4.png\";","module.exports = __webpack_public_path__ + \"static/media/kevinhuang78.b0a56e04.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pgrimaud.6a3dad23.jpg\";","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Layout from \"antd/lib/layout\";\nimport Menu from \"antd/lib/menu\";\nimport Icon from \"antd/lib/icon\";\nimport BackTop from \"antd/lib/back-top\";\nimport Logo from \"../../static/img/logo/logo-ratp.png\";\nimport { Link } from \"react-router-dom\";\n\nclass AppLayout extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            collapsedMenu: false\n        };\n\n        this.handleCollapse = this.handleCollapse.bind(this);\n    }\n\n    handleCollapse() {\n        this.setState({ collapsedMenu: !this.state.collapsedMenu });\n    }\n\n    render() {\n        return (\n            <Layout>\n                <BackTop />\n                <Layout.Sider\n                    collapsible\n                    breakpoint=\"lg\"\n                    collapsed={this.state.collapsedMenu}\n                    onCollapse={this.handleCollapse}\n                >\n                    <img src={Logo} alt=\"Logo de RATP\" className=\"logo\" />\n                    <Menu\n                        theme=\"dark\"\n                        defaultOpenKeys={this.props.defaultOpenKeys}\n                        defaultSelectedKeys={this.props.defaultSelectedKeys}\n                        mode=\"inline\"\n                    >\n                        <Menu.Item key=\"home\">\n                            <Link to=\"/\">\n                                <Icon type=\"home\" />\n                                <span>Page d'accueil</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"traffic\">\n                            <Link to=\"/traffics\">\n                                <Icon type=\"stock\" />\n                                <span>Trafic</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"line\">\n                            <Link to=\"/lines\">\n                                <Icon type=\"line\" />\n                                <span>Lignes de transports</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"schedule\">\n                            <Link to=\"/schedules\">\n                                <Icon type=\"clock-circle\" />\n                                <span>Horaires</span>\n                            </Link>\n                        </Menu.Item>\n                        <Menu.SubMenu\n                            key=\"about\"\n                            title={\n                                <span>\n                                  <Icon type=\"setting\" />\n                                  <span>À propos</span>\n                                </span>\n                            }\n                        >\n                            <Menu.Item key=\"team\">\n                                <Link to=\"/team\">\n                                    <Icon type=\"team\" />\n                                    <span>L'équipe</span>\n                                </Link>\n                            </Menu.Item>\n                            <Menu.Item key=\"contact\">\n                                <Link to=\"/contacts\">\n                                    <Icon type=\"contacts\" />\n                                    <span>Contact</span>\n                                </Link>\n                            </Menu.Item>\n                        </Menu.SubMenu>\n                    </Menu>\n                </Layout.Sider>\n                <Layout>\n                    <Layout.Content className={`${this.state.collapsedMenu ? \"\" : \"ant-layout-content--collapsed\"}`}>\n                        {this.props.children}\n                    </Layout.Content>\n                    <Layout.Footer className={`${this.state.collapsedMenu ? \"\" : \"ant-layout-footer--collapsed\"}`}>\n                        RATP API Interface ©2019 Created by <a href=\"https://github.com/kevinhuang78/\" rel=\"noreferrer noopener\" target=\"_blank\">Kévin Huang</a>\n                    </Layout.Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}\n\nAppLayout.propTypes = {\n    /** Default selected keys for menu on the left */\n    defaultSelectedKeys: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default AppLayout;","import React from \"react\";\nimport AppLayout from \"../../components/layouts/AppLayout\";\n\nconst NotFoundExceptionScreen = () => (\n    <AppLayout>\n        <h1 className=\"not-found\">404 - Not found</h1>\n    </AppLayout>\n);\n\nexport default NotFoundExceptionScreen;","import React, { Component } from \"react\";\nimport AppLayout from \"../components/layouts/AppLayout\";\nimport Divider from \"antd/lib/divider\";\n\nclass HomeScreen extends Component {\n    constructor(props) {\n        super(props);\n\n        document.title = \"RATP API Interface - Page d'accueil\";\n    }\n\n    render() {\n        return (\n            <AppLayout\n                defaultSelectedKeys={['home']}\n            >\n                <Divider>Qu'est-ce que ce site web ?</Divider>\n                <p>Il s'agit d'une web app développé dans le cadre d'un cours à l'Institut de l'Internet et du Multimédia</p>\n                <Divider>D'où viennent les données ?</Divider>\n                <p>J'utilise <a href=\"https://github.com/pgrimaud/ratp-api-rest\" rel=\"noreferrer noopener\" target=\"_blank\">cette API</a>, je n'en détiens pas les droits.</p>\n            </AppLayout>\n        );\n    }\n}\nexport default HomeScreen;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: process.env.REACT_APP_API_URL\n});\n\ninstance.interceptors.request.use(\n    config => {\n        /*\n\n        Example on how we can pass a token inside each API call (in this API no need of being connected)\n\n        const token = localStorage.getItem('userToken');\n        const user = parseJwt(token);\n\n        // If no user, then disconnect\n        user || store.dispatch(tryLogout());\n\n        // Check token\n        config.headers['Authorization'] = token ? `Bearer ${token}` : null;\n        */\n        return config;\n    },\n    error => (Promise.reject(error))\n);\ninstance.defaults.headers['Content-Type'] = 'application/ld+json';\ninstance.defaults.timeout = 3000;\n\nexport default instance;","import React from \"react\";\nimport Skeleton from \"antd/lib/skeleton\";\n\nconst LoadingScreen = () => (\n    <Skeleton\n        avatar\n        paragraph={{ rows: 6 }}\n        active\n    />\n);\n\nexport default LoadingScreen;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport LogoMetro from \"../../static/img/logo/logo-metro.png\";\nimport LogoTramway from \"../../static/img/logo/logo-tramway.png\";\nimport LogoRer from \"../../static/img/logo/logo-rer.png\";\nimport LogoNoctilien from \"../../static/img/logo/logo-noctilien.png\";\nimport LogoBus from \"../../static/img/logo/logo-bus.png\";\n\nfunction renderIcon(type) {\n    switch (type) {\n        case \"Métro\":\n            return LogoMetro;\n        case \"Tramway\":\n            return LogoTramway;\n        case \"RER\":\n            return LogoRer;\n        case \"Noctilien\":\n            return LogoNoctilien;\n        case \"Bus\":\n            return LogoBus;\n        default:\n            return null;\n    }\n}\n\nconst TrafficCard = (props) => (\n    <div className=\"trafficCard\">\n        <div className=\"trafficCard__header\">\n            <img className=\"trafficCard__icon\" src={renderIcon(props.type)} alt={\"Icône de \" + props.type + \" \" + props.trafficItem.line} />\n            <h2 className=\"trafficCard__line\">{props.trafficItem.line}</h2>\n        </div>\n        <div className=\"trafficCard__content\">\n            <p className=\"trafficCard__title\">{props.trafficItem.title}</p>\n            <p className=\"trafficCard__message\">{props.trafficItem.message}</p>\n        </div>\n    </div>\n);\n\nTrafficCard.propTypes = {\n    /** The item which is containing traffic information */\n    trafficItem: PropTypes.object.isRequired,\n    /** The type of traffic */\n    type: PropTypes.oneOf(['Métro', 'Tramway', 'RER']).isRequired\n};\n\nexport default TrafficCard;","import React, { Component, Fragment } from \"react\";\nimport Select from \"antd/lib/select\";\nimport TrafficCard from \"./TrafficCard\";\nimport PropTypes from \"prop-types\";\nimport Pagination from \"antd/lib/pagination\";\n\nclass TrafficTab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            traffic: this.props.traffic,\n            page: 1\n        };\n\n        this.handleSearch = this.handleSearch.bind(this);\n    }\n\n    handleSearch(value) {\n        this.setState({\n            traffic: value.length > 0\n                ? [...this.props.traffic].filter(t => value.some(v => t.line === v))\n                : this.props.traffic\n        });\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <Select\n                    mode=\"multiple\"\n                    showSearch\n                    allowClear\n                    placeholder={\"Sélectionnez une ou plusieurs ligne(s) de \" + this.props.type + \"(s)\"}\n                    onChange={value => this.handleSearch(value)}\n                >\n                    {\n                        this.props.traffic.map(t =>\n                            <Select.Option key={t.line} value={t.line}>{this.props.type} {t.line}</Select.Option>\n                        )\n                    }\n                </Select>\n                {\n                    this.state.traffic\n                        .slice((this.state.page - 1) * 10, this.state.page * 10)\n                        .map(t =>\n                            <TrafficCard\n                                key={this.props.type + \"-\" + t.line}\n                                type={this.props.type}\n                                trafficItem={t}\n                            />\n                        )\n                }\n                {\n                    this.state.traffic.length > 10 &&\n                        <Pagination onChange={page => this.setState({page})} total={this.state.traffic.length} />\n                }\n            </Fragment>\n        );\n    }\n}\n\nTrafficTab.propTypes = {\n    /** The array of traffics */\n    traffic: PropTypes.array.isRequired,\n    /** The type of traffic */\n    type: PropTypes.oneOf(['Métro', 'Tramway', 'RER']).isRequired\n};\n\nexport default TrafficTab;","import React from \"react\";\nimport Icon from \"antd/lib/icon\";\nimport notification from \"antd/lib/notification\";\n\nexport function removeDuplicates(myArr, prop) {\n    return myArr.filter((obj, pos, arr) => arr.map(mapObj => mapObj[prop]).indexOf(obj[prop]) === pos);\n}\n\nexport function notificationError(message, description, icon = <Icon type=\"frown\" />, duration = 10) {\n    return notification.error({\n        message,\n        description,\n        icon,\n        duration\n    })\n}","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { getTraffic } from \"../actions/traffics\";\nimport AppLayout from \"../components/layouts/AppLayout\";\nimport LoadingScreen from \"../components/LoadingScreen\";\nimport Tabs from \"antd/lib/tabs\";\nimport Icon from \"antd/lib/icon\";\nimport TrafficTab from \"../components/traffic/TrafficTab\";\nimport { notificationError } from \"../utils/helper\";\n\nclass TrafficScreen extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true\n        };\n\n        document.title = \"RATP API Interface - Trafic\";\n\n        this.loadTraffic = this.loadTraffic.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadTraffic();\n    }\n\n    loadTraffic() {\n        this.props.getTraffic()\n            .then(() => this.setState({loading: false}))\n            .catch(() => notificationError(this.props.traffics.trafficError.code, this.props.traffics.trafficError.message));\n    }\n\n    render() {\n        const trafficList = this.props.traffics.trafficList;\n\n        return (\n            <AppLayout\n                defaultSelectedKeys={['traffic']}\n            >\n                {\n                    this.state.loading\n                        ? <LoadingScreen />\n                        : <div>\n                            <Tabs\n                                defaultActiveKey=\"metros\"\n                                tabBarExtraContent={\n                                    <Icon\n                                        type=\"reload\"\n                                        onClick={() => {\n                                            this.setState({loading: true});\n                                            this.loadTraffic();\n                                        }}\n                                    />\n                                }\n                            >\n                                <Tabs.TabPane tab=\"Métros\" key=\"metros\">\n                                    <TrafficTab\n                                        traffic={trafficList.metros}\n                                        type=\"Métro\"\n                                    />\n                                </Tabs.TabPane>\n                                <Tabs.TabPane tab=\"RERs\" key=\"rers\">\n                                    <TrafficTab\n                                        traffic={trafficList.rers}\n                                        type=\"RER\"\n                                    />\n                                </Tabs.TabPane>\n                                <Tabs.TabPane tab=\"Tramways\" key=\"tramways\">\n                                    <TrafficTab\n                                        traffic={trafficList.tramways}\n                                        type=\"Tramway\"\n                                    />\n                                </Tabs.TabPane>\n                            </Tabs>\n                        </div>\n                }\n            </AppLayout>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    traffics: state.traffics\n});\n\nconst mapDispatchToProps = {\n    getTraffic\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TrafficScreen);","import API from \"../utils/API\";\n\nexport const GET_TRAFFIC_REQUESTED = 'GET_TRAFFIC_REQUESTED';\nexport const GET_TRAFFIC_SUCCESS = 'GET_TRAFFIC_SUCCESS';\nexport const GET_TRAFFIC_FAILURE = 'GET_TRAFFIC_FAILURE';\n\nexport function getTraffic() {\n    return dispatch => {\n        dispatch({type: GET_TRAFFIC_REQUESTED});\n        const request = API.get('/traffic');\n        request\n            .then(response => dispatch({type: GET_TRAFFIC_SUCCESS, data: response.data.result}))\n            .catch(error => dispatch({type: GET_TRAFFIC_FAILURE, data: error.response.data.result}))\n        ;\n        return request;\n    };\n}","import API from \"../utils/API\";\n\nexport const GET_LINES_REQUESTED = 'GET_LINES_REQUESTED';\nexport const GET_LINES_SUCCESS = 'GET_LINES_SUCCESS';\nexport const GET_LINES_FAILURE = 'GET_LINES_FAILURE';\n\nexport function getLines() {\n    return dispatch => {\n        dispatch({type: GET_LINES_REQUESTED});\n        const request = API.get('/lines');\n        request\n            .then(response => dispatch({type: GET_LINES_SUCCESS, data: response.data.result}))\n            .catch(error => dispatch({type: GET_LINES_FAILURE, data: error.response.data.result}))\n        ;\n        return request;\n    };\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport LogoMetro from \"../../static/img/logo/logo-metro.png\";\nimport LogoTramway from \"../../static/img/logo/logo-tramway.png\";\nimport LogoRer from \"../../static/img/logo/logo-rer.png\";\nimport LogoNoctilien from \"../../static/img/logo/logo-noctilien.png\";\nimport LogoBus from \"../../static/img/logo/logo-bus.png\";\n\nfunction renderIcon(type) {\n    switch (type) {\n        case \"Métro\":\n            return LogoMetro;\n        case \"Tramway\":\n            return LogoTramway;\n        case \"RER\":\n            return LogoRer;\n        case \"Noctilien\":\n            return LogoNoctilien;\n        case \"Bus\":\n            return LogoBus;\n        default:\n            return null;\n    }\n}\n\nconst LineCard = (props) => (\n    <div className=\"trafficCard\">\n        <div className=\"trafficCard__header\">\n            <img className=\"trafficCard__icon\" src={renderIcon(props.type)} alt={\"Icône de \" + props.type + \" \" + props.lineItem.code} />\n            <h2 className=\"trafficCard__line\">{props.lineItem.code}</h2>\n        </div>\n        <div className=\"trafficCard__content\">\n            <p className=\"trafficCard__title\">{props.lineItem.name}</p>\n            <p className=\"trafficCard__message\">Directions : {props.lineItem.directions}</p>\n        </div>\n    </div>\n);\n\nLineCard.propTypes = {\n    /** The item which is containing traffic information */\n    lineItem: PropTypes.object.isRequired,\n    /** The type of traffic */\n    type: PropTypes.oneOf(['Métro', 'Tramway', 'RER', 'Noctilien', 'Bus']).isRequired\n};\n\nexport default LineCard;","import React, { Component, Fragment } from \"react\";\nimport Select from \"antd/lib/select\";\nimport PropTypes from \"prop-types\";\nimport Pagination from \"antd/lib/pagination\";\nimport LineCard from \"./LineCard\";\nimport { removeDuplicates } from \"../../utils/helper\";\n\nclass LineTab extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            line: this.props.line,\n            page: 1\n        };\n\n        this.handleSearch = this.handleSearch.bind(this);\n    }\n\n    handleSearch(value) {\n        this.setState({\n            line: value.length > 0\n                ? [...this.props.line].filter(l => value.some(v => l.name.includes(v)))\n                : this.props.line\n        });\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <Select\n                    mode=\"multiple\"\n                    showSearch\n                    allowClear\n                    placeholder={\"Sélectionnez une ou plusieurs ligne(s) de \" + this.props.type + \"(s)\"}\n                    onChange={value => this.handleSearch(value)}\n                >\n                    {\n                        removeDuplicates(this.props.line, 'code')\n                            .map(l =>\n                                <Select.Option key={l.id} value={l.name}>{l.name}</Select.Option>\n                            )\n                    }\n                </Select>\n                {\n                    this.state.line\n                        .slice((this.state.page - 1) * 10, this.state.page * 10)\n                        .map(l =>\n                            <LineCard\n                                key={this.props.type + \"-\" + l.id}\n                                type={this.props.type}\n                                lineItem={l}\n                            />\n                        )\n                }\n                {\n                    this.state.line.length > 10 &&\n                        <Pagination simple onChange={page => this.setState({page})} total={this.state.line.length} />\n                }\n            </Fragment>\n        );\n    }\n}\n\nLineTab.propTypes = {\n    /** The array of lines */\n    line: PropTypes.array.isRequired,\n    /** The type of line */\n    type: PropTypes.oneOf(['Métro', 'Tramway', 'RER', 'Noctilien', 'Bus']).isRequired\n};\n\nexport default LineTab;","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { getLines } from \"../actions/lines\";\nimport AppLayout from \"../components/layouts/AppLayout\";\nimport LoadingScreen from \"../components/LoadingScreen\";\nimport Tabs from \"antd/lib/tabs\";\nimport Icon from \"antd/lib/icon\";\nimport LineTab from \"../components/line/LineTab\";\nimport { notificationError } from \"../utils/helper\";\n\nclass LinesScreen extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true\n        };\n\n        document.title = \"RATP API Interface - Lignes de transports\";\n\n        this.loadLines = this.loadLines.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadLines();\n    }\n\n    loadLines() {\n        this.props.getLines()\n            .then(() => this.setState({loading: false}))\n            .catch(() => notificationError(this.props.lines.linesError.code, this.props.lines.linesError.message));\n    }\n\n    render() {\n        const linesList = this.props.lines.linesList;\n\n        return (\n            <AppLayout\n                defaultSelectedKeys={['line']}\n            >\n                {\n                    this.state.loading\n                        ? <LoadingScreen />\n                        : <div>\n                            <Tabs\n                                defaultActiveKey=\"metros\"\n                                tabBarExtraContent={\n                                    <Icon\n                                        type=\"reload\"\n                                        onClick={() => {\n                                            this.setState({loading: true});\n                                            this.loadLines();\n                                        }}\n                                    />\n                                }\n                            >\n                                <Tabs.TabPane tab=\"Métros\" key=\"metros\">\n                                    <LineTab\n                                        line={linesList.metros}\n                                        type=\"Métro\"\n                                    />\n                                </Tabs.TabPane>\n                                <Tabs.TabPane tab=\"RERs\" key=\"rers\">\n                                    <LineTab\n                                        line={linesList.rers}\n                                        type=\"RER\"\n                                    />\n                                </Tabs.TabPane>\n                                <Tabs.TabPane tab=\"Tramways\" key=\"tramways\">\n                                    <LineTab\n                                        line={linesList.tramways}\n                                        type=\"Tramway\"\n                                    />\n                                </Tabs.TabPane>\n                                <Tabs.TabPane tab=\"Bus\" key=\"buses\">\n                                    <LineTab\n                                        line={linesList.buses}\n                                        type=\"Bus\"\n                                    />\n                                </Tabs.TabPane>\n                                <Tabs.TabPane tab=\"Noctiliens\" key=\"noctiliens\">\n                                    <LineTab\n                                        line={linesList.noctiliens}\n                                        type=\"Noctilien\"\n                                    />\n                                </Tabs.TabPane>\n                            </Tabs>\n                        </div>\n                }\n            </AppLayout>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    lines: state.lines\n});\n\nconst mapDispatchToProps = {\n    getLines\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LinesScreen);","import React, { Component } from \"react\";\nimport { getLines } from \"../actions/lines\";\nimport connect from \"react-redux/es/connect/connect\";\nimport AppLayout from \"../components/layouts/AppLayout\";\nimport LoadingScreen from \"../components/LoadingScreen\";\nimport { notificationError, removeDuplicates } from \"../utils/helper\";\nimport Cascader from \"antd/lib/cascader\";\nimport { getSchedules, getDestinations, getStations } from \"../actions/schedules\";\nimport Select from \"antd/lib/select\";\nimport Spin from \"antd/lib/spin\";\nimport Timeline from \"antd/lib/timeline/Timeline\";\n\nclass SchedulesScreen extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            stationsLoading: false,\n            destinationsLoading: false,\n            schedulesLoading: false,\n            stations: [],\n            destinations: [],\n            schedules: [],\n            request: {\n                type: \"\",\n                code: \"\",\n                station: \"\",\n                way: \"\"\n            },\n            values: {\n                typeCode: null,\n                station: null,\n                way: null\n            }\n        };\n\n        document.title = \"RATP API Interface - Horaires\";\n\n        this.loadStations = this.loadStations.bind(this);\n        this.loadDestinations = this.loadDestinations.bind(this);\n        this.loadSchedules = this.loadSchedules.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.getLines()\n            .then(() => this.setState({loading: false}))\n            .catch(() => notificationError(this.props.lines.linesError.code, this.props.lines.linesError.message));\n    }\n\n    renderOptionsSchedules(lines) {\n        const copyObject = {...lines};\n        const metros = removeDuplicates(copyObject.metros, 'code');\n        const rers = removeDuplicates(copyObject.rers, 'code');\n        const tramways = removeDuplicates(copyObject.tramways, 'code');\n        const buses = removeDuplicates(copyObject.buses, 'code');\n        const noctiliens = removeDuplicates(copyObject.noctiliens, 'code');\n        return [\n            {\n                value: 'metros',\n                label: 'Métros',\n                children: metros.map(m => ({\n                    value: m.code,\n                    label: m.name\n                })),\n            },\n            {\n                value: 'rers',\n                label: 'RERs',\n                children: rers.map(r => ({\n                    value: r.code,\n                    label: r.name\n                })),\n            },\n            {\n                value: 'tramways',\n                label: 'Tramways',\n                children: tramways.map(t => ({\n                    value: t.code,\n                    label: t.name\n                })),\n            },\n            {\n                value: 'buses',\n                label: 'Bus',\n                children: buses.map(b => ({\n                    value: b.code,\n                    label: b.name\n                })),\n            },\n            {\n                value: 'noctiliens',\n                label: 'Noctiliens',\n                children: noctiliens.map(n => ({\n                    value: n.code,\n                    label: n.name\n                })),\n            }\n        ];\n    }\n\n    loadStations(value) {\n        const type = value.length === 2 ? value[0] : \"\";\n        const code = value.length === 2 ? value[1] : \"\";\n        this.setState({\n            stationsLoading: true,\n            request: {\n                type,\n                code\n            },\n            values: {\n                typeCode: value\n            },\n            stations: [],\n            destinations: [],\n            schedules: []\n        });\n        value.length === 2\n            ? this.props.getStations(type, code)\n                .then(() => this.setState({\n                    stationsLoading: false,\n                    stations: this.props.schedules.stationsList\n                }))\n                .catch(() => notificationError(this.props.schedules.stationsError.code, this.props.schedules.stationsError.message))\n            : this.setState({stationsLoading: false})\n    }\n\n    loadDestinations(station) {\n        this.setState({\n            destinationsLoading: true,\n            request: {\n                ...this.state.request,\n                station,\n                way: \"\"\n            },\n            values: {\n                ...this.state.values,\n                station,\n                way: null\n            },\n            destinations: [],\n            schedules: []\n        });\n        this.props.getDestinations(this.state.request.type, this.state.request.code)\n            .then(() => this.setState({\n                destinationsLoading: false,\n                destinations: this.props.schedules.destinationsList\n            }))\n            .catch(() => notificationError(this.props.schedules.destinationsError.code, this.props.schedules.destinationsError.message));\n    }\n\n    loadSchedules(way) {\n        this.setState({\n            request: {\n                ...this.state.request,\n                way\n            },\n            values: {\n                ...this.state.values,\n                way\n            },\n            schedules: []\n        }, () => {\n            if (way) {\n                this.setState({schedulesLoading: true});\n                this.props.getSchedules(this.state.request.type, this.state.request.code, this.state.request.station, this.state.request.way)\n                    .then(() => {\n                        if (this.props.schedules.schedulesError) {\n                            notificationError(this.props.schedules.schedulesError.code, this.props.schedules.schedulesError.message);\n                        } else {\n                            this.setState({\n                                schedulesLoading: false,\n                                schedules: this.props.schedules.schedulesList\n                            });\n                        }\n                    });\n            }\n        });\n    }\n\n    render() {\n        return (\n            <AppLayout\n                defaultSelectedKeys={['schedule']}\n            >\n                {\n                    this.state.loading\n                        ? <LoadingScreen />\n                        : <div>\n                            <div className=\"schedules\">\n                                <div className=\"schedules__search\">\n                                    <p className=\"schedules__searchLabel\">Sélectionnez la ligne souhaitée</p>\n                                    <Cascader\n                                        options={this.renderOptionsSchedules(this.props.lines.linesList)}\n                                        expandTrigger=\"hover\"\n                                        placeholder=\"Sélectionnez la ligne souhaitée\"\n                                        showSearch\n                                        value={this.state.values.typeCode}\n                                        onChange={value => this.loadStations(value)}\n                                    />\n                                </div>\n                                {\n                                    this.state.stationsLoading\n                                        ? <Spin tip=\"Chargement...\" />\n                                        : (this.state.stations.length > 0 && !this.state.stationsLoading) &&\n                                            <div className=\"schedules__search\">\n                                                <p className=\"schedules__searchLabel\">Sélectionnez la station</p>\n                                                <Select\n                                                    showSearch\n                                                    allowClear\n                                                    placeholder=\"Sélectionnez la station\"\n                                                    value={this.state.values.station}\n                                                    onChange={value => this.loadDestinations(value)}\n                                                >\n                                                    {\n                                                        this.state.stations.map(s =>\n                                                            <Select.Option key={s.slug} value={s.slug}>{s.name}</Select.Option>\n                                                        )\n                                                    }\n                                                </Select>\n                                            </div>\n                                }\n                                {\n                                    this.state.destinationsLoading\n                                        ? <Spin tip=\"Chargement...\" />\n                                        : (this.state.destinations.length > 0 && !this.state.destinationsLoading) &&\n                                        <div className=\"schedules__search\">\n                                            <p className=\"schedules__searchLabel\">Sélectionnez la destination</p>\n                                            <Select\n                                                showSearch\n                                                allowClear\n                                                placeholder=\"Sélectionnez la destination\"\n                                                value={this.state.values.way}\n                                                onChange={value => this.loadSchedules(value)}\n                                            >\n                                                <Select.Option key=\"A+R\" value=\"A+R\">Les 2 destinations</Select.Option>\n                                                {\n                                                    this.state.destinations.map(d =>\n                                                        <Select.Option key={d.way} value={d.way}>{d.name}</Select.Option>\n                                                    )\n                                                }\n                                            </Select>\n                                        </div>\n                                }\n                            </div>\n                            {\n                                this.state.schedulesLoading\n                                    ? <LoadingScreen />\n                                    : (this.state.schedules.length > 0 && !this.state.schedulesLoading) &&\n                                        <Timeline mode=\"alternate\">\n                                            {\n                                                this.state.schedules\n                                                    .map(s =>\n                                                        <Timeline.Item\n                                                            key={s.message + s.destination}\n                                                            position={\n                                                                s.destination === this.state.destinations[0].name\n                                                                    ? 'right'\n                                                                    : 'left'\n                                                            }\n                                                        >\n                                                            {s.message} en direction de {s.destination}\n                                                        </Timeline.Item>\n                                                    )\n                                            }\n                                        </Timeline>\n                            }\n                          </div>\n                }\n            </AppLayout>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    lines: state.lines,\n    schedules: state.schedules\n});\n\nconst mapDispatchToProps = {\n    getLines,\n    getDestinations,\n    getStations,\n    getSchedules\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SchedulesScreen);","import API from \"../utils/API\";\n\nexport const GET_SCHEDULES_REQUESTED = 'GET_SCHEDULES_REQUESTED';\nexport const GET_SCHEDULES_SUCCESS = 'GET_SCHEDULES_SUCCESS';\nexport const GET_SCHEDULES_FAILURE = 'GET_SCHEDULES_FAILURE';\n\nexport function getSchedules(type, code, station, way) {\n    return dispatch => {\n        dispatch({type: GET_SCHEDULES_REQUESTED});\n        const request = API.get('/schedules/' + type + '/' + code + '/' + station + '/' + way);\n        request\n            .then(response => {\n                if (response.data.result.schedules.length === 1) {\n                    dispatch({type: GET_SCHEDULES_FAILURE, data: response.data.result.schedules[0]});\n                } else {\n                    dispatch({type: GET_SCHEDULES_SUCCESS, data: response.data.result.schedules});\n                }\n            })\n        ;\n        return request;\n    };\n}\n\nexport const GET_STATIONS_REQUESTED = 'GET_STATIONS_REQUESTED';\nexport const GET_STATIONS_SUCCESS = 'GET_STATIONS_SUCCESS';\nexport const GET_STATIONS_FAILURE = 'GET_STATIONS_FAILURE';\n\nexport function getStations(type, code) {\n    return dispatch => {\n        dispatch({type: GET_STATIONS_REQUESTED});\n        const request = API.get('/stations/' + type + '/' + code);\n        request\n            .then(response => dispatch({type: GET_STATIONS_SUCCESS, data: response.data.result.stations}))\n            .catch(error => dispatch({type: GET_STATIONS_FAILURE, data: error.response.data.result}))\n        ;\n        return request;\n    };\n}\n\nexport const GET_DESTINATIONS_REQUESTED = 'GET_DESTINATIONS_REQUESTED';\nexport const GET_DESTINATIONS_SUCCESS = 'GET_DESTINATIONS_SUCCESS';\nexport const GET_DESTINATIONS_FAILURE = 'GET_DESTINATIONS_FAILURE';\n\nexport function getDestinations(type, code) {\n    return dispatch => {\n        dispatch({type: GET_DESTINATIONS_REQUESTED});\n        const request = API.get('/destinations/' + type + '/' + code);\n        request\n            .then(response => dispatch({type: GET_DESTINATIONS_SUCCESS, data: response.data.result.destinations}))\n            .catch(error => dispatch({type: GET_DESTINATIONS_FAILURE, data: error.response.data.result}))\n        ;\n        return request;\n    };\n}","import React from \"react\";\nimport AppLayout from \"../components/layouts/AppLayout\";\nimport Divider from \"antd/lib/divider\";\nimport Card from \"antd/lib/card\";\nimport KevinHuang from \"../static/img/team/kevinhuang78.jpg\";\nimport PierreGrimaud from \"../static/img/team/pgrimaud.jpg\";\n\nconst TeamScreen = () => (\n    <AppLayout\n        defaultOpenKeys={['about']}\n        defaultSelectedKeys={['team']}\n    >\n        <Divider>Team Front-End (React)</Divider>\n        <div className=\"team__item\">\n            <a href=\"https://github.com/kevinhuang78\" rel=\"noreferrer noopener\" target=\"_blank\">\n                <Card\n                    hoverable\n                    cover={<img alt=\"Kévin Huang\" src={KevinHuang} />}\n                >\n                    <Card.Meta title=\"Kévin Huang\" description=\"https://github.com/kevinhuang78\" />\n                </Card>\n            </a>\n        </div>\n        <Divider>Team Back-End (API)</Divider>\n        <div className=\"team__item\">\n            <a href=\"https://github.com/pgrimaud\" rel=\"noreferrer noopener\" target=\"_blank\">\n                <Card\n                    hoverable\n                    cover={<img alt=\"Pierre Grimaud\" src={PierreGrimaud} />}\n                >\n                    <Card.Meta title=\"Pierre Grimaud\" description=\"https://github.com/pgrimaud\" />\n                </Card>\n            </a>\n        </div>\n    </AppLayout>\n);\n\nexport default TeamScreen;","import React from \"react\";\nimport AppLayout from \"../components/layouts/AppLayout\";\n\nconst ContactScreen = () => (\n    <AppLayout\n        defaultOpenKeys={['about']}\n        defaultSelectedKeys={['contact']}\n    >\n        <p>Vous pouvez me contacter sur ce Repository GitHub : <a href=\"https://github.com/kevinhuang78/ratp-api-interface\" rel=\"noreferrer noopener\" target=\"_blank\">Le Repository GitHub</a></p>\n    </AppLayout>\n);\n\nexport default ContactScreen;","import './sass/index.scss';\nimport React from 'react';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\nimport NotFoundExceptionScreen from \"./screens/Exceptions/NotFoundExceptionScreen\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport TrafficScreen from \"./screens/TrafficScreen\";\nimport LinesScreen from \"./screens/LinesScreen\";\nimport SchedulesScreen from \"./screens/SchedulesScreen\";\nimport TeamScreen from \"./screens/TeamScreen\";\nimport ContactScreen from \"./screens/ContactScreen\";\n\nconst App = () => (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component={HomeScreen} />\n            <Route exact path=\"/traffics\" component={TrafficScreen} />\n            <Route exact path=\"/lines\" component={LinesScreen} />\n            <Route exact path=\"/schedules\" component={SchedulesScreen} />\n            <Route exact path=\"/team\" component={TeamScreen} />\n            <Route exact path=\"/contacts\" component={ContactScreen} />\n\n            { /* Last Route is 404 Not Found, if it doesn't find any of these route, show 404 */ }\n            <Route component={NotFoundExceptionScreen} />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from \"../actions/traffics\";\n\nconst initialState = {\n    trafficLoading: false,\n    trafficError: null,\n    trafficList: {}\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        // Get traffic\n        case types.GET_TRAFFIC_REQUESTED:\n            return {\n                ...state,\n                trafficLoading: true\n            };\n        case types.GET_TRAFFIC_SUCCESS:\n            return {\n                ...state,\n                trafficLoading: false,\n                trafficList: action.data\n            };\n        case types.GET_TRAFFIC_FAILURE:\n            return {\n                ...state,\n                trafficLoading: false,\n                trafficError: action.data\n            };\n        default :\n            return state;\n    }\n}","import * as types from \"../actions/lines\";\n\nconst initialState = {\n    linesLoading: false,\n    linesError: null,\n    linesList: {}\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        // Get lines\n        case types.GET_LINES_REQUESTED:\n            return {\n                ...state,\n                linesLoading: true\n            };\n        case types.GET_LINES_SUCCESS:\n            return {\n                ...state,\n                linesLoading: false,\n                linesList: action.data\n            };\n        case types.GET_LINES_FAILURE:\n            return {\n                ...state,\n                linesLoading: false,\n                linesError: action.data\n            };\n        default :\n            return state;\n    }\n}","import * as types from \"../actions/schedules\";\n\nconst initialState = {\n    schedulesLoading: false,\n    schedulesError: null,\n    schedulesList: [],\n    destinationsLoading: false,\n    destinationsError: null,\n    destinationsList: [],\n    stationsLoading: false,\n    stationsError: null,\n    stationsList: []\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        // Get schedules\n        case types.GET_SCHEDULES_REQUESTED:\n            return {\n                ...state,\n                schedulesLoading: true\n            };\n        case types.GET_SCHEDULES_SUCCESS:\n            return {\n                ...state,\n                schedulesLoading: false,\n                schedulesList: action.data,\n                schedulesError: null\n            };\n        case types.GET_SCHEDULES_FAILURE:\n            return {\n                ...state,\n                schedulesLoading: false,\n                schedulesError: action.data\n            };\n        // Get destinations\n        case types.GET_DESTINATIONS_REQUESTED:\n            return {\n                ...state,\n                destinationsLoading: true\n            };\n        case types.GET_DESTINATIONS_SUCCESS:\n            return {\n                ...state,\n                destinationsLoading: false,\n                destinationsList: action.data\n            };\n        case types.GET_DESTINATIONS_FAILURE:\n            return {\n                ...state,\n                destinationsLoading: false,\n                destinationsError: action.data\n            };\n        // Get stations\n        case types.GET_STATIONS_REQUESTED:\n            return {\n                ...state,\n                stationsLoading: true\n            };\n        case types.GET_STATIONS_SUCCESS:\n            return {\n                ...state,\n                stationsLoading: false,\n                stationsList: action.data\n            };\n        case types.GET_STATIONS_FAILURE:\n            return {\n                ...state,\n                stationsLoading: false,\n                stationsError: action.data\n            };\n        default :\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport traffics from './traffics';\nimport lines from './lines';\nimport schedules from './schedules';\n\nexport default combineReducers({\n    traffics,\n    lines,\n    schedules\n})","import 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\nimport logger from 'redux-logger';\n\nexport const store = createStore(\n    rootReducer,\n    process.env.NODE_ENV === \"production\" ? applyMiddleware(thunk) : applyMiddleware(logger, thunk)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n/* If you want your app to work offline and load faster, you can change\n   unregister() to register() below. Note this comes with some pitfalls.\n   Learn more about service workers: https://bit.ly/CRA-PWA */\nserviceWorker.unregister();\n"],"sourceRoot":""}